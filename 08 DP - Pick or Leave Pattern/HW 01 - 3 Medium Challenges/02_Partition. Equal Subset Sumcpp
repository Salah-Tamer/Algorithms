// https://leetcode.com/problems/partition-equal-subset-sum/description/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    const static int MAX_N = 200;
    const static int MAX_T = 100 * 200 + 1;
    int memory[MAX_N][MAX_T];
    vector<int> nums;

    bool canSubsetSum(int idx, int target){
        if(target < 0) return false;
        if(target == 0) return true;
        if(idx == nums.size()) return false;

        auto &ret = memory[idx][target];
        if(ret != -1){
            return ret;
        }

        // Leave
        if(canSubsetSum(idx + 1, target)){
            return ret = true;
        }

        // Pick
        return ret = canSubsetSum(idx + 1, target - nums[idx]);
    }

    bool subsetSum(vector<int> &values, int target){
        nums = values;
        memset(memory, -1, sizeof(memory));
        return canSubsetSum(0, target);
    }
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int num : nums) {
            sum += num;
        }

        if(sum % 2 != 0) return false;
        int target = sum / 2;

        return subsetSum(nums, target);
    }
};

int main(){
    return 0;
}